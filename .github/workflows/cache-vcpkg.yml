# vcpkg must be already checked out. Two options:
# 1. Highly suggested: use vcpkg as submodule of your repository, for example under <repo-root>/vcpkg/.
#   - uses: lukka/get-vcpkg
#     # This is useless as it is the default, but shown here anyway:
#     with:
#       ${{ github.workspace }}/vcpkg
# 2. Another option is to checkout it prior this action, e.g.,:  
#   - uses: actions/checkout@v2
#     with:
#       repository: myname/myvcpkg
#       path: vcpkg

on:
  workflow_call:
    inputs:
      vcpkg_root_path:
        required: false
        type: string
        default: ${{ github.workspace }}/vcpkg
      vcpkgjson_dir_path:
        required: true
        type: string
    outputs:
      cache_key:
        value: ${{ jobs.setup_vcpkg.outputs.output1 }}

jobs:
    setup_vcpkg:
      runs-on: nooo
      outputs:
        cache_key: ${{ steps.set-output.outputs.cache_key }}
        vcpkg_root: ${{ steps.set-output.outputs.vcpkg_root }}
      steps:
        - name: Set VCPKG_COMMITID for cache key usage.
          shell: bash
          run: |
            echo "VCPKG_COMMITID=$(git -C $INPUT_VCPKG_ROOT_PATH rev-parse --short HEAD)" >> $GITHUB_ENV
        - uses: actions/github-script@v5
          id: set-outputs
          name: Set cache key.
          with:
            script: |
              fs = require('fs');
              cacheDir = fs.join('${{ inputs.vpkg_root_path }}', 'cache');
              core.exportVariable('VCPKG_DEFAULT_BINARY_CACHE', cacheDir);
              core.exportVariable('VCPKG_ROOT', '${{ inputs.vpkg_root_path }}');
              await io.mkdirP(cacheDir);

              cacheKey = process.env["VCPKG_COMMIT_ID"];
              vcpkgJsonDir = core.getInput(${{ inputs.vcpkgjson_dir_path }});
              vcpkgJsonFile = fs.join(vcpkgJsonDir, "vcpkg.json");
              vcpkgConfJsonFile = fs.join(vcpkgConfJsonFile, "vcpkg-configuration.json");
              if (await io.lib.io-util.exists(vcpkgJsonFile))
                cacheKey += "-vcpkgJson="+glob.hashFiles(vcpkgJsonFile);
              if (await io.lib.io-util.exists(vcpkgConfJsonFile))
                cacheKey += "-vcpkgConfigurationJson="+glob.hashFiles(vcpkgConfJsonFile);
              cacheKey += "-ImageOS="+ process.env["ImageVersion"] + process.platform;

              core.exportVariable("VCPKG_CACHE_KEY", cacheKey);
              // Set outputs
              core.setOutput("cache_key", cacheKey);
              core.setOutput("vcpkg_root", process.env['VCPKG_ROOT']);

        - uses: actions/cache@v3
          name: Restore from cache, or setup cache post action.
          with:
            # The first path is the location of vcpkg (it contains the vcpkg executable and data files).
            # The second path is where vcpkg generates artifacts while consuming the vcpkg.json manifest file.
            # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
            path: |
              ${{ env.VCPKG_ROOT }}
              !${{ env.VCPKG_ROOT }}/buildtrees
              !${{ env.VCPKG_ROOT }}/packages
              !${{ env.VCPKG_ROOT }}/downloads
              !${{ env.VCPKG_ROOT }}/installed
            # The key is composed in a way that it gets properly invalidated: this must happen whenever vcpkg's Git commit id changes, or the list of packages changes. In this case a cache miss must happen and a new entry with a new key with be pushed to GitHub the cache service.
            # The key includes: hash of the vcpkg.json file, the hash of the vcpkg Git commit id, and the used vcpkg's triplet. The vcpkg's commit id would suffice, but computing an hash out it does not harm.
            # Note: given a key, the cache content is immutable. If a cache entry has been created improperly, in order the recreate the right content the key must be changed as well, and it must be brand new (i.e. not existing already).
            key: ${{ env.VCPKG_CACHE_KEY }}
